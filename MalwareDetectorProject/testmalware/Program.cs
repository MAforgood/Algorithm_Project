using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        int cnt = 0;
        // Provide the directory path containing the files to check
        string directoryPath = @"C:\Users\Mohammad\Downloads\Released\Released\Train\Benign";

        // Get all files in the directory
        string[] filePaths = Directory.GetFiles(directoryPath, "*", SearchOption.AllDirectories);

        Parallel.ForEach(filePaths, filePath =>
        {
            bool isMalware = CheckFileForMalware(filePath);
            if (isMalware)
            {
                Console.WriteLine($"File '{filePath}' contains the malware pattern. It may be malicious.");
                cnt++;
            }
            else
            {
                Console.WriteLine($"File '{filePath}' safe.");
            }

        });
        Console.WriteLine(cnt);
        Console.ReadLine();
    }


    static bool CheckFileForMalware(string filePath)
    {
        // Read the file as hex string
        string hexString = ReadFileAsHexString(filePath);

        // Convert hex string to ASCII string
        string content = HexToString(hexString);

        // Define the malware pattern
        //string malwarePattern = "0123456789abcdefghijklmnopqrstuvwxyz";
        string malwarePattern = "<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">";


        // Check if the pattern exists in the content
        // bool isMalware = false;

        bool isMalware = content.Contains(malwarePattern);
        return isMalware;
    }

    static string ReadFileAsHexString(string filePath)
    {
        using (FileStream fileStream = File.OpenRead(filePath))
        {
            byte[] buffer = new byte[fileStream.Length];
            fileStream.Read(buffer, 0, buffer.Length);

            // Convert bytes to hex string
            string hexString = BitConverter.ToString(buffer).Replace("-", "");

            return hexString;
        }

    }



    static string HexToString(string hexString)
    {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < hexString.Length; i += 2)
        {
            string hexPair = hexString.Substring(i, 2);
            byte b = Convert.ToByte(hexPair, 16);
            sb.Append((char)b);
        }

        return sb.ToString();
    }
}
